define(["app"], function (BrewOptix) {
    
    BrewOptix.module("Entities", function (Entities, BrewOptix, Backbone, Marionette, $, _) {

        Entities.Order = Backbone.Model.extend({
            urlRoot: BrewOptix.url("Order"),
            defaults: { "InvoiceNumber": "", "OrderDate": new Date(), OrderItems: [],DistributorID:"",Notes:"",OrderStatus:0 },
            idAttribute: "EntityID"
        });

        Entities.OrderCollection = Backbone.Collection.extend({
            url: BrewOptix.url("Order"),
            model: Entities.Order,
            comparator: function (model1, model2) {
                if (model1.get("OrderDate") < model2.get("OrderDate")) return -1;
                if (model1.get("OrderDate") > model2.get("OrderDate")) return 1;
                return 0;
            }
        });


        var orders;

        var api = {
            getOrders: function () {
                var defer = $.Deferred();

                if (orders !== undefined && orders.length > 0) {
                    defer.resolve(orders);
                } else {
                    orders = new Entities.OrderCollection();

                    orders.fetch({
                        success: function () {
                            defer.resolve(orders);
                        }
                    });
                }

                return defer.promise();
            }
        };
        
        var distributorFilter = "all";
        var startDateFilter = "all";
        var endDateFilter = "all";
        
        BrewOptix.on("order:filter", function (distributorCriterion, startDateCriterion, endDateCriterion) {
            distributorFilter = distributorCriterion;
            startDateFilter = startDateCriterion;
            endDateFilter = endDateCriterion;
        });
       

        BrewOptix.reqres.setHandler("order:distributorFilter", function () { return distributorFilter; });

        BrewOptix.reqres.setHandler("order:startDateFilter", function () { return startDateFilter; });

        BrewOptix.reqres.setHandler("order:endDateFilter", function () { return endDateFilter; });
        
        BrewOptix.reqres.setHandler("order:entities", function () { return api.getOrders(); });

        BrewOptix.reqres.setHandler("order:entity", function (id) {
            var order = orders.where({ EntityID: id });
            if (order.length > 0) {
                return order[0];
            } else {
                return undefined;
            }
        });

        BrewOptix.reqres.setHandler("order:brandDataFromOrder", function (order) {

            var fetchingPackageTypes = BrewOptix.request("packageType:entities");
            var headerRow = ["BrandName"];
            var index = 0;
            var packageTypeIndex = {};

            $.when(fetchingPackageTypes).done(function(packageTypes) {
                _.each(packageTypes.models, function (packageType) {
                    if (packageType.get('UseForOrdering')) {
                        headerRow.push(packageType.get('Name'));
                        packageTypeIndex[packageType.get('EntityID')] = index;
                        index++;
                    }
                });
            });

            var data = [headerRow];

            if (order !== undefined && order !== null) {
                var orderItems = order.get('OrderItems');
                if (orderItems !== undefined && orderItems !== null && orderItems.length > 0) {
                    var brandData = {};
                    _.each(orderItems, function(orderItem) {
                        var orderItemBrandName = BrewOptix.request("brand:getName", orderItem.BrandID);
                        if (brandData[orderItemBrandName] === undefined) {
                            var zeros = [];
                            for (var packageTypeId in packageTypeIndex) {
                                zeros.push(0);
                                brandData[orderItemBrandName] = zeros;
                            }
                        }

                        var packageIndex = packageTypeIndex[orderItem.PackageType];
                        brandData[orderItemBrandName][packageIndex] = orderItem.Quantity;
                    });

                    for (var brandName in brandData) {
                        brandData[brandName].unshift(brandName);
                        data.push(brandData[brandName]);
                    }
                }
            }

            return data;
        });

        BrewOptix.reqres.setHandler("order:orderItemsFromBrandData", function (brandData) {
            var orderItems = [];

            for (var i = 1; i < brandData.length; i++) {
                var row = brandData[i];
                if (row[0] !== undefined && row[0] !== null) {
                    var brandId = BrewOptix.request("brand:getId", row[0]);
                    for (var j = 1; j < row.length; j++) {
                        var packageTypeId = BrewOptix.request("packageType:getId", brandData[0][j]);
                        var quantity = row[j];

                        if (quantity !== undefined && quantity !== null & quantity !== 0) {
                            orderItems.push({BrandID: brandId,PackageType: packageTypeId, Quantity: quantity});
                        }
                    }
                }
            }

            return orderItems;
        });

        BrewOptix.on("order:added", function (order) {
            orders.set(order, { remove: false });
            orders.trigger('reset');
        });

    });

    return BrewOptix.Entities.Order;
});

