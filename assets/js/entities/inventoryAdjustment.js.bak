define(["app"], function(BrewOptix) {
    
    BrewOptix.module("Entities", function (Entities, BrewOptix, Backbone, Marionette, $, _) {

        Entities.InventoryAdjustment = Backbone.Model.extend({
            urlRoot: BrewOptix.url("InventoryAdjustment"),
            defaults: { "AdjustmentType": 0, "CountType": 0, "AdjustmentDate": new Date(), "Quantity": 0, "BrandID": "", "PackageTypeOrPackageMaterialID": "", "BrandSpecific": true, "DisplayValue": ""},
            idAttribute: "EntityID"
        });

        Entities.InventoryAdjustmentCollection = Backbone.Collection.extend({
            url: BrewOptix.url("InventoryAdjustment"),
            model: Entities.InventoryAdjustment,
            comparator: "name"
        });


        var inventoryAdjustments;

        var api = {
            getInventoryAdjustments: function () {
                var defer = $.Deferred();

                if (inventoryAdjustments !== undefined && inventoryAdjustments.length > 0) {
                    defer.resolve(inventoryAdjustments);
                } else {
                    inventoryAdjustments = new Entities.InventoryAdjustmentCollection();

                    inventoryAdjustments.fetch({
                        success: function(data) {
                            defer.resolve(data);
                        }
                    });
                }

                return defer.promise();
            }
        };

        BrewOptix.reqres.setHandler("inventoryAdjustment:entities", function () { return api.getInventoryAdjustments(); });

        BrewOptix.reqres.setHandler("inventoryAdjustment:entity", function (id) {
            var inventoryAdjustment = inventoryAdjustments.where({ EntityID: id });
            if (inventoryAdjustment.length > 0) {
                return inventoryAdjustment[0];
            } else {
                return undefined;
            }
        });

        BrewOptix.on("inventoryAdjustment:added", function (inventoryAdjustment) {
            inventoryAdjustments.set(inventoryAdjustment, { remove: false });
            inventoryAdjustments.trigger('reset');
        });

    });

    return BrewOptix.Entities.InventoryAdjustment;
});

